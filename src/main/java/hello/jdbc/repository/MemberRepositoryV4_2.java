package hello.jdbc.repository;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.NoSuchElementException;import javax.sql.DataSource;import org.springframework.jdbc.datasource.DataSourceUtils;import org.springframework.jdbc.support.JdbcUtils;import hello.jdbc.domain.Member;import hello.jdbc.repository.ex.MyDbException;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;/** * SQLException을 전부 MyDbException으로 변경 */@RequiredArgsConstructor@Slf4jpublic class MemberRepositoryV4_2 implements MemberRepository{	private final DataSource dataSource;	@Override	public Member save(Member member){		String sql = "insert into member(member_id, money) values (?, ?) ";		Connection conn = null;		PreparedStatement pstmt = null;		try {			conn = getConnection();			pstmt = conn.prepareStatement(sql);			pstmt.setString(1, member.getMemberId());			pstmt.setInt(2, member.getMoney());			pstmt.executeUpdate();			return member;		} catch (SQLException e) {			throw new MyDbException(e);		} finally {			close(conn, pstmt, null);		}	}	@Override	public Member findById(String memberId) {		String sql = "select * from member where member_id = ? ";		Connection conn = getConnection();		PreparedStatement pstmt = null;		ResultSet rs = null;		try {			pstmt = conn.prepareStatement(sql);			pstmt.setString(1, memberId);			rs = pstmt.executeQuery();			if (rs.next()) {				Member member = new Member();				member.setMemberId(rs.getString("member_id"));				member.setMoney(rs.getInt("money"));				return member;			} else {				throw new NoSuchElementException("member not found memberId=" + memberId);			}		} catch (SQLException e) {			throw new MyDbException(e);		} finally {			close(conn, pstmt, rs);		}	}	@Override	public void update(String memberId, int money) {		String sql = "update member set money=? where member_id=? ";		Connection conn = getConnection();		PreparedStatement pstmt = null;		try {			conn.setAutoCommit(false);			pstmt = conn.prepareStatement(sql);			pstmt.setInt(1, money);			pstmt.setString(2, memberId);			int resultSize = pstmt.executeUpdate();			log.info("resultSize={}", resultSize);		} catch (SQLException e) {			throw new MyDbException(e);		} finally {			JdbcUtils.closeStatement(pstmt);			// JdbcUtils.closeConnection(conn);		}	}	@Override	public void delete(String memberId) {		String sql = "delete from member where member_id=? ";		Connection conn = null;		PreparedStatement pstmt = null;		try {			conn = getConnection();			pstmt = conn.prepareStatement(sql);			pstmt.setString(1, memberId);			int resultSize = pstmt.executeUpdate();			log.info("resultSize={}", resultSize);		} catch (SQLException e) {			throw new MyDbException(e);		} finally {			close(conn, pstmt, null);		}	}	private void close(Connection conn, Statement stmt, ResultSet rs) {		JdbcUtils.closeResultSet(rs);		JdbcUtils.closeStatement(stmt);		// JdbcUtils.closeConnection(conn);		DataSourceUtils.releaseConnection(conn, dataSource);	}	private Connection getConnection() {		// Connection conn = dataSource.getConnection();		Connection conn = DataSourceUtils.getConnection(dataSource);		log.info("get conn={}, class={}", conn, conn.getClass());		return conn;	}}