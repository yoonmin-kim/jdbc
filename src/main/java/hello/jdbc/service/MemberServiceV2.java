package hello.jdbc.service;import java.sql.Connection;import java.sql.SQLException;import javax.sql.DataSource;import hello.jdbc.domain.Member;import hello.jdbc.repository.MemberRepositoryV2;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;@RequiredArgsConstructor@Slf4jpublic class MemberServiceV2 {	private final DataSource dataSource;	private final MemberRepositoryV2 repository;	public void accountTransfer(String fromId, String toId, int money) throws SQLException {		Connection conn = dataSource.getConnection();		try {			conn.setAutoCommit(false);			bizLogic(conn, fromId, toId, money);			conn.commit();		} catch (Exception e) {			conn.rollback();			throw new IllegalStateException(e);		} finally {			release(conn);		}	}	private void release(Connection conn) {		if (conn != null) {			try {				conn.setAutoCommit(true);				conn.close();			} catch (Exception e) {				log.error("error", e);			}		}	}	private void bizLogic(Connection conn, String fromId, String toId, int money) throws SQLException {		Member fromMember = repository.findById(conn, fromId);		Member toMember = repository.findById(conn, toId);		repository.update(conn, fromMember.getMemberId(), fromMember.getMoney() - money);		validation(toMember);		repository.update(conn, toMember.getMemberId(), toMember.getMoney() + money);	}	private void validation(Member toMember) {		if ("ex".equals(toMember.getMemberId())) {			throw new IllegalStateException("이체중 예외 발생");		}	}}