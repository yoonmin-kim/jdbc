package hello.jdbc.service;import static hello.jdbc.connection.ConnectionConst.*;import static org.assertj.core.api.Assertions.*;import java.sql.SQLException;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.jdbc.datasource.DriverManagerDataSource;import hello.jdbc.domain.Member;import hello.jdbc.repository.MemberRepositoryV1;import hello.jdbc.repository.MemberRepositoryV2;import lombok.extern.slf4j.Slf4j;/** * 트랜잭션 - 파라미터 방식 동기화 */@Slf4jclass MemberServiceV2Test {	public static final String MEMBER_A = "memberA";	public static final String MEMBER_B = "memberB";	public static final String MEMBER_EX = "ex";	MemberServiceV2 service;	MemberRepositoryV2 repository;	@BeforeEach	void beforeEach() {		DriverManagerDataSource dataSource = new DriverManagerDataSource(URL, USERNAME, PASSWORD);		repository = new MemberRepositoryV2(dataSource);		service = new MemberServiceV2(dataSource, repository);	}	@AfterEach	void afterEach() throws SQLException {		repository.delete(MEMBER_A);		repository.delete(MEMBER_B);		repository.delete(MEMBER_EX);	}	@Test	@DisplayName("정상 이체")	void accountTransfer() throws SQLException {		Member memberA = new Member(MEMBER_A, 10000);		Member memberB = new Member(MEMBER_B, 10000);		repository.save(memberA);		repository.save(memberB);		log.info("START TX");		service.accountTransfer(memberA.getMemberId(), memberB.getMemberId(), 2000);		log.info("END TX");		Member findMemberA = repository.findById(memberA.getMemberId());		Member findMemberB = repository.findById(memberB.getMemberId());		assertThat(findMemberA.getMoney()).isEqualTo(8000);		assertThat(findMemberB.getMoney()).isEqualTo(12000);	}	@Test	@DisplayName("예외 발생")	void accountTransferEx() throws SQLException {		Member memberA = new Member(MEMBER_A, 10000);		Member memberEx = new Member(MEMBER_EX, 10000);		repository.save(memberA);		repository.save(memberEx);		assertThatThrownBy(() -> service.accountTransfer(memberA.getMemberId(), memberEx.getMemberId(), 2000))		.isInstanceOf(IllegalStateException.class);		Member findMemberA = repository.findById(memberA.getMemberId());		Member findMemberB = repository.findById(memberEx.getMemberId());		assertThat(findMemberA.getMoney()).isEqualTo(10000);		assertThat(findMemberB.getMoney()).isEqualTo(10000);	}}